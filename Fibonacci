import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;

public class Fibonacci {

	// Caching the result
	static Map<Integer, BigInteger> fibMap = new HashMap<Integer, BigInteger>();

	/**
	 * Calculate fibonacci
	 */
	static BigInteger fib(int currentNumber) {
		int previousNumber = currentNumber;
		// Find the latest number stored in cache. Special cases:
		// fib(0) = 0 and fib(1) = 1
		while (fibMap.get(previousNumber) == null && previousNumber >= 0) {
			if (previousNumber < 2) {
				fibMap.put(previousNumber, 
						BigInteger.valueOf(previousNumber));
			}
			previousNumber--;
		}
		// Calculate result based on the formula:
		// fib(n) = fib(n-1) fib(n-2)
		for (int i = previousNumber; i < currentNumber; i++) {
			fibMap.put(i + 1, i < 1 ? BigInteger.valueOf(i + 1) : 
				fibMap.get(i - 1).add(fibMap.get(i)));
		}

		return fibMap.get(currentNumber);
	}

	public static void main(String[] args) {
		System.out.format("F(8181) = %d\n", fib(8181));
	}
}