import java.util.LinkedList;
import java.util.Queue;

public class RandomBinaryTreeOneQueue {
    Node root;

    /**
     * List all nodes at the same depth.
     */
    private void listByDepth() {
        if (root == null) {
            return;
        }
        // Store nodes in queue
        Queue<Node> currentDepth = new LinkedList<>();
        currentDepth.add(root);
        while (!currentDepth.isEmpty()) {
            // Print all nodes of current depth and at the same time,
            // enqueue nodes of next depth
            int currentSize = currentDepth.size();
            while (currentSize > 0) {
                Node node = currentDepth.remove();
                node.print();
                if (node.left != null) {
                    currentDepth.add(node.left);
                }
                if (node.right != null) {
                    currentDepth.add(node.right);
                }
                currentSize--;
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        RandomBinaryTreeOneQueue tree = new RandomBinaryTreeOneQueue();
        tree.insertTestData();
        tree.listByDepth();
    }

    class Node {
        int data;
        Node left;
        Node right;

        public Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }

        public void print() {
            System.out.format("(%d)", data);
        }
    }

    void insertTestData() {
        /*
         *      2
         *    /   \
         *   1     3
         *  / \   / \
         * 0   7 9   1
         *
         */

        root = new Node(2);
        root.left = new Node(1);
        root.right = new Node(3);
        root.left.left = new Node(0);
        root.left.right = new Node(7);
        root.right.left = new Node(9);
        root.right.right = new Node(1);
    }
}
